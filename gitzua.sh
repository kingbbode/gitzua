#!/bin/bash
# Git User Manager
# https://github.com/kingbbode/gitzua
#
# Implemented by Kingbbode (kingbbode@gmail.com)
#
# If you have a problem, please report it in the github issue.
# https://github.com/kingbbode/gitzua/issues
#
# Developed to help developers who use more than one github account.
# 
# GIT GAZUA~~!

setting_current_user() {
  CURRENT_USER="$(git remote -v | head -1 | awk '{print $2}' | tr -s ':' | cut -d ':' -f 1 | tr -s '@' | cut -d '@' -f 2)"
  if [[ "$CURRENT_USER" = "github.com" ]]; then
    CURRENT_USER="global"
  fi
}

check_valid_user() {
  local input=$1
  local hosts=$(cat ~/.ssh/config| grep 'Host ' | awk '{print $2}')
  local result=1
  for host in $hosts; do
    if [[ "$(ssh -G $host | grep user | awk '{print $2}' | head -n 1)" = "git" ]]; then
      if [ "$host" = "$input" ] || [ "global" = "$input" ]; then
        result=0
      fi;
    fi;
  done
  
  if [[ $result = 1 ]]; then
    echo "could't find user : '$input'"
    exit 1
  fi
}

print_user_list() {
  local hosts=$(cat ~/.ssh/config| grep 'Host ' | awk '{print $2}')
  printf "global"
  if [[ "global" = "$CURRENT_USER" ]]; then
    printf "[*]\n"
  else
    printf "[ ]\n"
  fi;  
  for host in $hosts; do 
    if [[ "$(ssh -G $host | grep user | awk '{print $2}' | head -n 1)" = "git" ]]; then
      printf "$host"
      
      if [[ "$host" = "$CURRENT_USER" ]]; then
        printf "[*]\n"
      else
        printf "[ ]\n"
      fi;
    fi; 	
  done
}

create_info() {
  while : ; do
    printf "email > " 
    read email

    if [[ -z "$email" ]]; then
      printf '%s\n' "email is required!"
      continue
    else
      break;
    fi
  done
  
  while : ; do
    printf "name > "
    read name

    if [[ -z "$name" ]]; then
      printf '%s\n' "name is required!"
      continue
    else
      break;
    fi
  done

  echo "\nCreate Public Key...\n"
  ssh-keygen -t rsa -C "$email" -f ~/.ssh/id_rsa_gitzua_$name
  write_ssh_config $email $name
}

write_ssh_config() {
  local email="$1"
  local name="$2"
  identityFile=~"/.ssh/id_rsa_gitzua_$name"

  cat >> ~/.ssh/config <<EOF

###########################
##Generated By GITZUAAA~!##
###########################
#gitzua-$name-email $email
Host $name
  HostName github.com
  User git
  IdentityFile $identityFile
EOF
}

change_user() {
  local changeUser="$1"
  local changeUserEmail=""
  if [[ "$changeUser" = "global" ]]; then
    changeUser="github.com"
    git config --local --unset user.name
    git config --local --unset user.email
  else
    changeUserEmail=$(cat ~/.ssh/config | grep gitzua-$1-email | awk '{printf $2}')
    git config --local user.name $changeUser
    git config --local user.email $changeUserEmail
  fi
  local currentRepository=$(git remote -v | head -1 | awk '{print $2}' | tr -s ':' | cut -d ':' -f 2)
  git remote set-url origin git@$changeUser:$currentRepository
  setting_current_user
}

check_use_git() {
  if [[ -d .git ]]; then
    printf ""
  else
    echo "Not a git repogitory"
    exit 1   
  fi
}

check_git_url_support() {
  if [[ $(git remote -v | head -n 1 | awk '{print $2}') != git@* ]]; then
    echo "not supported path. supported only ssh type."
    exit 1;
  fi
}

################################
############ GITZUA ############
################################

which git &> /dev/null
if [ "$?" != "0" ]; then
    echo "git is not installed..."
    exit 1
fi

case $1 in
  create)
    create_info
    ;;
  list)
    check_use_git
    setting_current_user
    print_user_list
    ;;
  use)
    check_use_git
    check_git_url_support
    setting_current_user
    if [[ "$2" != "" ]]; then
      check_valid_user $2
      change_user $2
      print_user_list
    else
      echo "usage : gitzua use [user]"
      exit 1
    fi
    ;;
  *)
    echo """
**********************************************************
********************** GITZUA HELP ***********************
**********************************************************
  create -- record user info & ssh key
  list -- print current user on git workspace.
  use [user name]-- change current user on git workspace.
----------------------------------------------------------
"""
    ;;
esac

